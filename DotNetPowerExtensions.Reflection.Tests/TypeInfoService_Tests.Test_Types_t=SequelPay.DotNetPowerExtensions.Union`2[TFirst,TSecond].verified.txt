{
  Type: Union<TFirst, TSecond>,
  PropertyDetails: [
    {
      MemberDetailType: Property,
      GetMethod: {
        ReturnType: TFirst,
        Name: get_First,
        ReflectionInfo: Union<TFirst, TSecond>.get_First(),
        IsInherited: false,
        InReflectionForCurrentType: true,
        IsExplicit: false
      },
      SetMethod: {
        ArgumentTypes: [
          TFirst
        ],
        ReturnType: Void,
        Name: set_First,
        ReflectionInfo: Union<TFirst, TSecond>.set_First(TFirst value),
        IsInherited: false,
        InReflectionForCurrentType: true,
        IsExplicit: false
      },
      Name: First,
      ReflectionInfo: Union<TFirst, TSecond>.First,
      IsInherited: false,
      InReflectionForCurrentType: true,
      IsExplicit: false
    },
    {
      MemberDetailType: Property,
      GetMethod: {
        ReturnType: TSecond,
        Name: get_Second,
        ReflectionInfo: Union<TFirst, TSecond>.get_Second(),
        IsInherited: false,
        InReflectionForCurrentType: true,
        IsExplicit: false
      },
      SetMethod: {
        ArgumentTypes: [
          TSecond
        ],
        ReturnType: Void,
        Name: set_Second,
        ReflectionInfo: Union<TFirst, TSecond>.set_Second(TSecond value),
        IsInherited: false,
        InReflectionForCurrentType: true,
        IsExplicit: false
      },
      Name: Second,
      ReflectionInfo: Union<TFirst, TSecond>.Second,
      IsInherited: false,
      InReflectionForCurrentType: true,
      IsExplicit: false
    },
    {
      MemberDetailType: Property,
      BackingField: {
        Name: <Value>k__BackingField,
        ReflectionInfo: Union<TFirst, TSecond>.<Value>k__BackingField,
        MemberDetailType: PropertyBackingField,
        IsInherited: false,
        InReflectionForCurrentType: true,
        IsExplicit: false
      },
      GetMethod: {
        ReturnType: object,
        Name: get_Value,
        ReflectionInfo: Union<TFirst, TSecond>.get_Value(),
        IsInherited: false,
        InReflectionForCurrentType: true,
        IsExplicit: false
      },
      SetMethod: {
        ArgumentTypes: [
          object
        ],
        ReturnType: Void,
        Name: set_Value,
        ReflectionInfo: Union<TFirst, TSecond>.set_Value(object value),
        IsInherited: false,
        InReflectionForCurrentType: true,
        IsExplicit: false
      },
      Name: Value,
      ReflectionInfo: Union<TFirst, TSecond>.Value,
      IsInherited: false,
      InReflectionForCurrentType: true,
      IsExplicit: false
    }
  ],
  MethodDetails: [
    {
      ReturnType: T,
      GenericArguments: [
        T
      ],
      Name: As,
      ReflectionInfo: Union<TFirst, TSecond>.As(),
      IsInherited: false,
      InReflectionForCurrentType: true,
      IsExplicit: false
    },
    {
      ArgumentTypes: [
        object
      ],
      ReturnType: bool,
      OverridenMethod: {
        ArgumentTypes: [
          object
        ],
        ReturnType: bool,
        Name: Equals,
        ReflectionInfo: ValueType.Equals(object obj),
        IsInherited: false,
        InReflectionForCurrentType: true,
        IsExplicit: false
      },
      Name: Equals,
      ReflectionInfo: Union<TFirst, TSecond>.Equals(object obj),
      IsInherited: false,
      DeclarationType: Override,
      InReflectionForCurrentType: true,
      IsExplicit: false
    },
    {
      ReturnType: int,
      OverridenMethod: {
        ReturnType: int,
        Name: GetHashCode,
        ReflectionInfo: ValueType.GetHashCode(),
        IsInherited: false,
        InReflectionForCurrentType: true,
        IsExplicit: false
      },
      Name: GetHashCode,
      ReflectionInfo: Union<TFirst, TSecond>.GetHashCode(),
      IsInherited: false,
      DeclarationType: Override,
      InReflectionForCurrentType: true,
      IsExplicit: false
    },
    {
      ArgumentTypes: [
        Union<TFirst, TSecond>
      ],
      ReturnType: TFirst,
      Name: op_Implicit,
      ReflectionInfo: Union<TFirst, TSecond>.op_Implicit(Union<TFirst, TSecond> obj),
      IsInherited: false,
      InReflectionForCurrentType: true,
      IsExplicit: false
    },
    {
      ArgumentTypes: [
        Union<TFirst, TSecond>
      ],
      ReturnType: TSecond,
      Name: op_Implicit,
      ReflectionInfo: Union<TFirst, TSecond>.op_Implicit(Union<TFirst, TSecond> obj),
      IsInherited: false,
      InReflectionForCurrentType: true,
      IsExplicit: false
    },
    {
      ArgumentTypes: [
        TFirst
      ],
      ReturnType: Union<TFirst, TSecond>,
      Name: op_Explicit,
      ReflectionInfo: Union<TFirst, TSecond>.op_Explicit(TFirst obj),
      IsInherited: false,
      InReflectionForCurrentType: true,
      IsExplicit: false
    },
    {
      ArgumentTypes: [
        TSecond
      ],
      ReturnType: Union<TFirst, TSecond>,
      Name: op_Explicit,
      ReflectionInfo: Union<TFirst, TSecond>.op_Explicit(TSecond obj),
      IsInherited: false,
      InReflectionForCurrentType: true,
      IsExplicit: false
    },
    {
      ArgumentTypes: [
        Union<TFirst, TSecond>,
        Union<TFirst, TSecond>
      ],
      ReturnType: bool,
      Name: op_Equality,
      ReflectionInfo: Union<TFirst, TSecond>.op_Equality(Union<TFirst, TSecond> left, Union<TFirst, TSecond> right),
      IsInherited: false,
      InReflectionForCurrentType: true,
      IsExplicit: false
    },
    {
      ArgumentTypes: [
        Union<TFirst, TSecond>,
        Union<TFirst, TSecond>
      ],
      ReturnType: bool,
      Name: op_Inequality,
      ReflectionInfo: Union<TFirst, TSecond>.op_Inequality(Union<TFirst, TSecond> left, Union<TFirst, TSecond> right),
      IsInherited: false,
      InReflectionForCurrentType: true,
      IsExplicit: false
    },
    {
      ReturnType: string,
      Name: ToString,
      ReflectionInfo: ValueType.ToString(),
      IsInherited: true,
      InReflectionForCurrentType: true,
      IsExplicit: false
    }
  ],
  BasePrivateMethodDetails: [
    {
      ArgumentTypes: [
        object
      ],
      ReturnType: bool,
      Name: CanCompareBits,
      ReflectionInfo: ValueType.CanCompareBits(object obj),
      IsInherited: false,
      InReflectionForCurrentType: true,
      IsExplicit: false
    }
  ]
}